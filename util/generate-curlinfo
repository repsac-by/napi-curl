#!/usr/bin/node
'use strict';

const { createReadStream } = require('node:fs');
const readline = require('node:readline');
const { spawnSync } = require('node:child_process');

(async () => {
	const version = curlVesrion();

	await Promise.all([ version, curlh() ]).then(createMaps);

})();

function curlVesrion () {
	const { error, status, stdout } = spawnSync('pkg-config', [ '--modversion', 'libcurl' ]);
	if (error)
		throw error;

	if (status !== 0)
		throw new Error(`pkg-config return status: ${status}`);

	return stdout.toString().trim();
}

function curlh () {
	const infos = [];
	const infoRe = /^\s*CURLINFO_(\w+)\s*=[^C]*CURLINFO_(LONG|DOUBLE|OFF_T|STRING|SLIST)/;

	return new Promise(resolve =>
		readline.createInterface({
			input: createReadStream('/usr/include/curl/curl.h'),
			crlfDelay: Infinity,
		}).on('line', line => {

			const i = infoRe.exec(line);
			if (i) {
				infos.push(`${i[1]}: '${i[1]}',`);
				return;
			}
		}).on('close', () => resolve({ infos })),
	);
}

function createMaps ([ version, { infos } ]) {
	process.stdout.write(`\
'use strict';

// libcurl ${version}

/** @enum {string} */
module.exports.curlinfo = {
	${infos.join('\n\t')}
};
`);
}
